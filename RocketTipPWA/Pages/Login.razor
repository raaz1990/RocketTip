@page "/"
@inject NavigationManager NavManager

<style>
.error-message {
    color:red;
}
</style>
<div class="login-container">
    <h1>Welcome Back!</h1>

    <!-- Username Input -->
    <div class="input-group">
        <span class="input-icon">
            <img src="images/profile.png" width="25px" alt="User Icon" />
        </span>
        <input type="text" placeholder="Username or Email" @bind="Username" />
    </div>
    @if (!string.IsNullOrEmpty(UsernameError))
    {
        <p class="error-message">@UsernameError</p>
    }

    <!-- Password Input -->
    <div class="input-group">
        <span class="input-icon">
            <img src="images/password.png" width="20px" alt="Lock Icon" />
        </span>
        <input placeholder="Password" @bind="Password" type="@PasswordInputType" />
        <span class="input-icon-right">
            <img src="images/hide.png" width="25px" alt="Eye Icon" @onclick="TogglePasswordVisibility" />
        </span>
    </div>
    @if (!string.IsNullOrEmpty(PasswordError))
    {
        <p class="error-message">@PasswordError</p>
    }

    <!-- Forgot Password Link -->
    <p class="forgot-password"><a href="ForgotPasswordPage">Forgot Password?</a></p>

    <!-- Login Button -->
    <button class="login-button" @onclick="HandleLogin">Login</button>

    <!-- Divider for OR Continue With -->
    <p class="or-divider">- OR Continue with -</p>

    <!-- Social Login Options -->
    <div class="social-login">
        <a href="#" class="social-icon">
            <img src="images/google_icon.png" alt="Google Icon" />
        </a>
        <a href="#" class="social-icon">
            <img src="images/apple_icon.png" alt="Apple Icon" />
        </a>
        <a href="#" class="social-icon">
            <img src="images/facebook_icon.png" alt="Facebook Icon" />
        </a>
    </div>

    <!-- Sign Up Link -->
    <p class="signup-link">Create An Account <a href="/Register">Sign Up</a></p>
</div>

@code {
    private string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    private bool IsPasswordVisible { get; set; } = false;
    private string UsernameError { get; set; } = string.Empty;
    private string PasswordError { get; set; } = string.Empty;
    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    private void HandleLogin()
    {
        // Reset errors
        UsernameError = string.Empty;
        PasswordError = string.Empty;

        bool isValid = true;

        // Validate Username (Email format)
        if (string.IsNullOrEmpty(Username))
        {
            UsernameError = "Username or Email is required.";
            isValid = false;
        }
        else if (!IsValidEmail(Username))
        {
            UsernameError = "Please enter a valid email.";
            isValid = false;
        }

        // Validate Password
        if (string.IsNullOrEmpty(Password))
        {
            PasswordError = "Password is required.";
            isValid = false;
        }
        else if (Password.Length < 6)
        {
            PasswordError = "Password must be at least 6 characters long.";
            isValid = false;
        }

        // If validation passes, navigate to the next page
        if (isValid)
        {
            NavManager.NavigateTo("NewAccountPage");
        }
    }

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var mailAddress = new System.Net.Mail.MailAddress(email);
            return mailAddress.Address == email;
        }
        catch
        {
            return false;
        }
    }
}
